<funcname> = arithmetic
<varname> = $var_a 
<varname> = $var_b
<varname> = $var_c 
<varname> = $var_d
<varname> = $var_e 
<varname> = $var_f
<varname> = $var_g 
<varname> = $var_h
<params> = (param <varname> <num_type>) (param <varname> <num_type>) 
<instruction> = local.get <varname> local.get <varname> <num_type>.add
<instruction> = local.get <varname> local.get <varname> <num_type>.sub
<instruction> = local.get <varname> local.get <varname> <num_type>.mul
<instruction> = local.get <varname> local.get <varname> <num_type>.div
<instructions> = <instruction>
<func_arithmetic> = (func $<funcname> <params> <result> <instructions>)

<rem> = rem
<set_rem> = (local.set $<rem> (<num_type>.rem_u (local.get <varname>) (<num_type>.const <num_value>)))
<get_rem> = (<num_type>.eqz (local.get $<rem>))
<local_rem> = (local $<rem> <num_type>)
<func_body_even> = <local_rem> <set_rem> <get_rem>
<params_even> = (param <varname> <num_type>)
<funcname_even> = is_even
<export_is_even> = (export "<funcname_even>" (func $<funcname_even>))
<funcs_even> = (func $<funcname_even> <params_even> <result> <func_body_even>)

<temp_num_type_i32> = i32 
<temp_num_type_i64> = i64 
<temp_num_type_f32> = f32 
<temp_num_type_f64> = f64
<temp_funcname> = arithmetic
<temp_varname_a> = $var_a 
<temp_varname_b> = $var_b
<temp_varname_c> = $var_c 
<temp_varname_d> = $var_d
<temp_varname_e> = $var_e 
<temp_varname_f> = $var_f
<temp_varname_g> = $var_g 
<temp_varname_h> = $var_h
<temp_params_i32> = (param <temp_varname_a> <temp_num_type_i32>) (param <temp_varname_b> <temp_num_type_i32>) 
<temp_params_i64> = (param <temp_varname_c> <temp_num_type_i64>) (param <temp_varname_d> <temp_num_type_i64>)
<temp_params_f32> = (param <temp_varname_e> <temp_num_type_f32>) (param <temp_varname_f> <temp_num_type_f32>)
<temp_params_f64> = (param <temp_varname_g> <temp_num_type_f64>) (param <temp_varname_h> <temp_num_type_f64>)
<temp_result_i32> = (result <temp_num_type_i32>)
<temp_result_i64> = (result <temp_num_type_i64>)
<temp_result_f32> = (result <temp_num_type_f32>)
<temp_result_f64> = (result <temp_num_type_f64>)
<temp_instruction_i32> = local.get <temp_varname_a> local.get <temp_varname_b> <temp_num_type_i32>.add
<temp_instruction_i32> = local.get <temp_varname_a> local.get <temp_varname_b> <temp_num_type_i32>.div
<temp_instruction_i32> = local.get <temp_varname_a> local.get <temp_varname_b> <temp_num_type_i32>.sub
<temp_instruction_i32> = local.get <temp_varname_a> local.get <temp_varname_b> <temp_num_type_i32>.mul
<temp_instruction_i64> = local.get <temp_varname_c> local.get <temp_varname_d> <temp_num_type_i64>.add
<temp_instruction_i64> = local.get <temp_varname_c> local.get <temp_varname_d> <temp_num_type_i64>.div
<temp_instruction_i64> = local.get <temp_varname_c> local.get <temp_varname_d> <temp_num_type_i64>.sub
<temp_instruction_i64> = local.get <temp_varname_c> local.get <temp_varname_d> <temp_num_type_i64>.mul
<temp_instruction_f32> = local.get <temp_varname_e> local.get <temp_varname_f> <temp_num_type_f32>.add
<temp_instruction_f32> = local.get <temp_varname_e> local.get <temp_varname_f> <temp_num_type_f32>.div
<temp_instruction_f32> = local.get <temp_varname_e> local.get <temp_varname_f> <temp_num_type_f32>.sub
<temp_instruction_f32> = local.get <temp_varname_e> local.get <temp_varname_f> <temp_num_type_f32>.mul
<temp_instruction_f64> = local.get <temp_varname_g> local.get <temp_varname_h> <temp_num_type_f64>.add
<temp_instruction_f64> = local.get <temp_varname_g> local.get <temp_varname_h> <temp_num_type_f64>.div
<temp_instruction_f64> = local.get <temp_varname_g> local.get <temp_varname_h> <temp_num_type_f64>.sub
<temp_instruction_f64> = local.get <temp_varname_g> local.get <temp_varname_h> <temp_num_type_f64>.mul
<temp_instructions_i32> = <temp_instruction_i32>
<temp_instructions_i64> = <temp_instruction_i64>
<temp_instructions_f32> = <temp_instruction_f32>
<temp_instructions_f64> = <temp_instruction_f64>
<temp_func> = (func $<temp_funcname> <temp_params_i32> <temp_result_i32> <temp_instructions_i32>)
<temp_func> = (func $<temp_funcname> <temp_params_i64> <temp_result_i64> <temp_instructions_i64>)
<temp_func> = (func $<temp_funcname> <temp_params_f32> <temp_result_f32> <temp_instructions_f32>)
<temp_func> = (func $<temp_funcname> <temp_params_f64> <temp_result_f64> <temp_instructions_f64>)

<temp_rem_i32> = rem_i32
<temp_set_rem_i32> = (local.set $<temp_rem_i32> (<temp_num_type_i32>.rem_u (local.get <temp_varname_a>) (<temp_num_type_i32>.const 2)))
<temp_get_rem_i32> = (<temp_num_type_i32>.eqz (local.get $<temp_rem_i32>))
<temp_local_rem_i32> = (local $<temp_rem_i32> <temp_num_type_i32>)
<temp_func_body_even> = <temp_local_rem_i32> <temp_set_rem_i32> <temp_get_rem_i32>
<temp_params_i32_even> = (param <temp_varname_a> <temp_num_type_i32>)
<temp_funcname_even> = is_even
<temp_export_is_even> = (export "<temp_funcname_even>" (func $<temp_funcname_even>))
<temp_funcs_even> = (func $<temp_funcname_even> <temp_params_i32_even> <temp_result_i32> <temp_func_body_even>)

<temp_set_func_i32> = (func $set_global (param $value i32) local.get $value global.set $globalname_a)
<temp_get_func_i32> = (func $get_global <temp_result_i32> global.get $globalname_a)
<temp_set_func_i64> = (func $set_global (param $value i64) local.get $value global.set $globalname_b)
<temp_get_func_i64> = (func $get_global (result i64) global.get $globalname_b)
<temp_set_func_f32> = (func $set_global (param $value f32) local.get $value global.set $globalname_c)
<temp_get_func_f32> = (func $get_global (result f32) global.get $globalname_c)
<temp_set_func_f64> = (func $set_global (param $value f64) local.get $value global.set $globalname_d)
<temp_get_func_f64> = (func $get_global (result f64) global.get $globalname_d)
<temp_set_func_i32> = (func $set_global (param $value i32) local.get $value global.set $globalname_e)
<temp_get_func_i32> = (func $get_global <temp_result_i32> global.get $globalname_e)
<temp_set_func_i64> = (func $set_global (param $value i64) local.get $value global.set $globalname_f)
<temp_get_func_i64> = (func $get_global (result i64) global.get $globalname_f)
<temp_set_func_f32> = (func $set_global (param $value f32) local.get $value global.set $globalname_g)
<temp_get_func_f32> = (func $get_global (result f32) global.get $globalname_g)
<temp_set_func_f64> = (func $set_global (param $value f64) local.get $value global.set $globalname_h)
<temp_get_func_f64> = (func $get_global (result f64) global.get $globalname_h)

<temp_funcs> = <temp_func>
<temp_funcs> = <temp_set_func_i32> <temp_get_func_i32> <temp_func>
<temp_funcs> = <temp_set_func_i64> <temp_get_func_i64> <temp_func>
<temp_funcs> = <temp_set_func_f32> <temp_get_func_f32> <temp_func>
<temp_funcs> = <temp_set_func_f64> <temp_get_func_f64> <temp_func>

<temp_globalname_a> = $globalname_a 
<temp_globalname_b> = $globalname_b
<temp_globalname_c> = $globalname_c
<temp_globalname_d> = $globalname_d
<temp_globalname_e> = $globalname_e 
<temp_globalname_f> = $globalname_f
<temp_globalname_g> = $globalname_g
<temp_globalname_h> = $globalname_h
<temp_global_type_i32> = i32 
<temp_global_type_i64> = i64 
<temp_global_type_f32> = f32
<temp_global_type_f64> = f64
<temp_global_mutability> = mut
<temp_global_value_i32> = i32.const <temp_i32value>
<temp_global_value_i64> = i64.const <temp_i64value>
<temp_global_value_f32> = f32.const <temp_f32value>
<temp_global_value_f64> = f64.const <temp_f64value>
<temp_i32value> = 0
<temp_i32value> = 2147483647
<temp_i32value> = 1024
<temp_i32value> = 3
<temp_i32value> = 4
<temp_i64value> = 0
<temp_i64value> = 1
<temp_i64value> = 9223372036854775807
<temp_i64value> = 3
<temp_i64value> = 4
<temp_f32value> = 0.0
<temp_f32value> = 2147483647.0
<temp_f32value> = 2.0
<temp_f32value> = 3.0
<temp_f32value> = 4.0
<temp_f64value> = 1.0
<temp_f64value> = 9223372036854775807.0
<temp_f64value> = 3.0
<temp_f64value> = 4.0
<temp_i32global> = (global <temp_globalname_a> (<temp_global_mutability> <temp_global_type_i32>) <temp_global_value_i32>)
<temp_i64global> = (global <temp_globalname_b> (<temp_global_mutability> <temp_global_type_i64>) <temp_global_value_i64>)
<temp_f32global> = (global <temp_globalname_c> (<temp_global_mutability> <temp_global_type_f32>) <temp_global_value_f32>)
<temp_f64global> = (global <temp_globalname_d> (<temp_global_mutability> <temp_global_type_f64>) <temp_global_value_f64>)
<temp_i32global_mut> = (global <temp_globalname_e> (<temp_global_mutability> <temp_global_type_i32>) <temp_global_value_i32>)
<temp_i64global_mut> = (global <temp_globalname_f> (<temp_global_mutability> <temp_global_type_i64>) <temp_global_value_i64>)
<temp_f32global_mut> = (global <temp_globalname_g> (<temp_global_mutability> <temp_global_type_f32>) <temp_global_value_f32>)
<temp_f64global_mut> = (global <temp_globalname_h> (<temp_global_mutability> <temp_global_type_f64>) <temp_global_value_f64>)
<temp_globals> = <temp_i32global> <temp_i64global> <temp_f32global> <temp_f64global> <temp_i32global_mut> <temp_i64global_mut> <temp_f32global_mut> <temp_f64global_mut>

<temp_elem_type> = funcref
<temp_table_type> = <temp_limits> <temp_elem_type>
<temp_limits> = <temp_min> 
<temp_limits> = <temp_max>
<temp_integer> = 0
<temp_min> = <temp_integer>
<temp_max> = <temp_integer>
<temp_table> = (table <temp_table_id> <temp_table_type>)
<temp_table_id> = $table_1
<temp_elem> = (elem (i32.const <temp_offset>) <temp_func_idx>)
<temp_offset> = <temp_integer>
<temp_func_idx> = $<temp_funcname>
<temp_tables> = <temp_table>
<temp_table_func> = (func $func_a)
<temp_table_func> = (func $func_b)
<temp_table_func> = (func $func_c)
<temp_table_func> = (func $func_d)
<temp_table_func> = (func $func_e)
<temp_table_func> = (func $func_f)
<temp_table_func> = (func $func_g)
<temp_table_func> = (func $func_h)
<temp_table_operation> = (func $table_operations (drop (table.size <temp_table_id>)))
<temp_tables> = <temp_table_func> <temp_table> <temp_table_operation>
<temp_elems> = <temp_elem> <temp_elem> <temp_elem>
<temp_elems> = <temp_elem> <temp_elem> 
<temp_elems> = <temp_elem>

<temp_typy_name> = $func_i64_i64
<temp_type> = (type <temp_typy_name> (func (param <temp_num_type_i64>) (result <temp_num_type_i64>)))
<temp_type_params_i64> = (param $x <temp_num_type_i64>)
<temp_type_instruction_i64> = (<temp_num_type_i64>.mul (local.get $x) (i64.const <temp_integer>))
<temp_type_func> = <temp_type> (func $double_i64 (type <temp_typy_name>) <temp_type_params_i64> <temp_result_i64> <temp_type_instruction_i64>)

<temp_size_of_page> = 1 
<temp_size_of_page> = 8
<temp_size_of_page> = 16
<temp_size_of_page> = 32
<temp_size_of_page> = 64
<temp_size_of_page> = 128
<temp_size_of_page> = 256
<temp_size_of_page> = 512
<temp_size_of_page> = 1024
<temp_mem_name> = $mem
<temp_mem_func_name> = $mem_func
<temp_memory_create> = (memory <temp_mem_name> <temp_size_of_page>)
<temp_memory> = <temp_memory_create> <temp_data> <temp_mem_func>
<temp_mem_size> = (local $mem_size <temp_num_type_i32>)
<temp_mem_grow> = (local $mem_grow <temp_num_type_i32>)
<temp_set_size> = (local.set $mem_size (memory.size))
<temp_set_grow> = (local.set $mem_grow (memory.grow (<temp_num_type_i32>.const 1)))
<temp_memory_fill> = (memory.fill (<temp_num_type_i32>.const 1024) (<temp_num_type_i32>.const 42) (<temp_num_type_i32>.const 100))
<temp_memory_copy> = (memory.copy (<temp_num_type_i32>.const 1124) (<temp_num_type_i32>.const 1024) (<temp_num_type_i32>.const 100))
<temp_memory_init> = (memory.init 0 (<temp_num_type_i32>.const 1224) (<temp_num_type_i32>.const 0) (<temp_num_type_i32>.const 13))
<temp_mem_func> = (func <temp_mem_func_name> <temp_mem_size> <temp_mem_grow> <temp_set_size> <temp_set_grow> <temp_memory_fill> <temp_memory_copy> <temp_memory_init>)

<temp_address> = $address
<temp_value> = $value
<temp_param_addr_i32> = (param <temp_address> i32)
<temp_param_value_i32> = (param <temp_value> i32)
<temp_store_body_i32> = (i32.store (local.get <temp_address>) (local.get <temp_value>))
<temp_store_func_i32> = (func $store_value <temp_param_addr_i32> <temp_param_value_i32> <temp_store_body_i32>)
<temp_load_body_i32> = (i32.load (local.get <temp_address>))
<temp_load_func_i32> = (func $load_value <temp_param_addr_i32> <temp_result_i32> <temp_load_body_i32>)
<temp_store_load_func_i32> = <temp_store_func_i32> <temp_load_func_i32>

<temp_param_addr_f32> = (param <temp_address> i32)
<temp_param_value_f32> = (param <temp_value> f32)
<temp_store_body_f32> = (f32.store (local.get <temp_address>) (local.get <temp_value>))
<temp_store_func_f32> = (func $store_value <temp_param_addr_f32> <temp_param_value_f32> <temp_store_body_f32>)
<temp_load_body_f32> = (f32.load (local.get <temp_address>))
<temp_load_func_f32> = (func $load_value <temp_param_addr_f32> <temp_result_f32> <temp_load_body_f32>)
<temp_store_load_func_f32> = <temp_store_func_f32> <temp_load_func_f32>

<temp_param_addr_f64> = (param <temp_address> i32)
<temp_param_value_f64> = (param <temp_value> f64)
<temp_store_body_f64> = (f64.store (local.get <temp_address>) (local.get <temp_value>))
<temp_store_func_f64> = (func $store_value <temp_param_addr_f64> <temp_param_value_f64> <temp_store_body_f64>)
<temp_load_body_f64> = (f64.load (local.get <temp_address>))
<temp_load_func_f64> = (func $load_value <temp_param_addr_f64> <temp_result_f64> <temp_load_body_f64>)
<temp_store_load_func_f64> = <temp_store_func_f64> <temp_load_func_f64>

<temp_param_addr_i64> = (param <temp_address> i32)
<temp_param_value_i64> = (param <temp_value> i64)
<temp_store_body_i64> = (i64.store (local.get <temp_address>) (local.get <temp_value>))
<temp_store_func_i64> = (func $store_value <temp_param_addr_i64> <temp_param_value_i64> <temp_store_body_i64>)
<temp_load_body_i64> = (i64.load (local.get <temp_address>))
<temp_load_func_i64> = (func $load_value <temp_param_addr_i64> <temp_result_i64> <temp_load_body_i64>)
<temp_store_load_func_i64> = <temp_store_func_i64> <temp_load_func_i64>

<temp_export_store> = (export "store_value" (func $store_value))
<temp_export_load> = (export "load_value" (func $load_value))

<temp_data> = (data (<temp_num_type_i32>.const 0) "Hello, WebAは🌀🏃‍♀️✨📦📂📝⬇️🏃‍♀️🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌾🌿🌵🌴🌲еสวัสดีครับสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut🌿🌵םЗдравssembly!")
<temp_data> = (data (<temp_num_type_i32>.const 2) "\00\0дравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾こんにちは、We0\80\3F") 
<temp_data> = (data (<temp_num_type_i32>.const 4) "こんにちは🌀🏃‍♀️✨📦📂📝⬇️🏃‍♀️🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세は、WebAssembly！") 
<temp_data> = (data (<temp_num_type_i32>.const 8) "®enTagこんにちは안녕하세요नमस्ते🌍CiaoGut🌿🌵🌴🌲🌳🌱🌰🌻🌼Tagこんにちは안녕하세요नमस्ते🌍CiaoGut🌿🌵🌴🌲🌳🌱🌰🌷🌹🌸🌺🌾こ🦀") 
<temp_data> = (data (<temp_num_type_i32>.const 16) "👯🌾🌺🌻🌼🌷🌹🌸🌾🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹⛔") 
<temp_data> = (data (<temp_num_type_i32>.const 32) "🌀📂にちは🌀🏃‍♀️✨📦📂📝⬇️🏃‍♀️🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut🌿🌵ly📂") 

<temp_func_ref_a> = (func $func_ref_a <temp_result_i32> (<temp_num_type_i32>.const 42))
<temp_func_ref_b> = (func $func_ref_b)
<temp_ref_null> = (ref.null func)
<temp_ref_is_null> = (ref.is_null)
<temp_if_null> = if <temp_result_i32> (then (call $func_ref_a))
<temp_else_null> = (else (i32.const 0))
<temp_ref_oper> = (func $ref_operations <temp_result_i32> <temp_ref_null> <temp_ref_is_null> (<temp_if_null> <temp_else_null>))
<temp_ref_func> = <temp_func_ref_a> <temp_func_ref_b> <temp_ref_oper>

<temp_local_i32> = (local i32)
<temp_local_set_get> = (local.set 0 (local.get 0))
<temp_local_tee> = (local.tee 0 (i32.add (local.get 0) (i32.const 1)))
<temp_local_opers> = (func $local_tee (param i32) <temp_result_i32> <temp_local_i32> <temp_local_set_get> <temp_local_tee>)
<temp_local_opers> = (func $local_tee (param i32) <temp_result_i32> <temp_local_i32> <temp_local_set_get> <temp_local_tee>) (export "local_tee" (func $local_tee))

<temp_sum_name> = sum_n
<temp_local_init_sum> = (local $sum <temp_num_type_i32>)
<temp_local_init_i> = (local $i <temp_num_type_i32>)
<temp_init_sum> = <temp_num_type_i32>.const 0 local.set $sum
<temp_set_iter> = <temp_num_type_i32>.const 1 local.set $i
<temp_ret_sum> = local.get $sum
<temp_loop_terminate> = local.get $i local.get $n i32.gt_s if br $loop end
<temp_add_iter_sum> = local.get $sum local.get $i i32.add local.set $sum
<temp_incre_iter> = local.get $i i32.const 1 i32.add local.set $i
<temp_continue_loop> = br $loop
<temp_loop_body> = (loop $loop <temp_loop_terminate> <temp_add_iter_sum> <temp_incre_iter> <temp_continue_loop>)
<temp_loop_func> = (func $<temp_sum_name> (export "<temp_sum_name>") (param $n <temp_num_type_i32>) <temp_result_i32> <temp_local_init_sum> <temp_local_init_i> <temp_init_sum> <temp_set_iter> <temp_loop_body> <temp_ret_sum>)

<temp_strat_body> = (start $store_num)
<temp_start_func> = (func $store_num (<temp_num_type_i32>.store (<temp_num_type_i32>.const 0) (<temp_num_type_i32>.const 42))) 
<temp_start> = (memory 1) (export "memory" (memory 0)) <temp_start_func> <temp_strat_body>

<temp_ctz_inst> = (i32.ctz (local.get $arg))
<temp_clz_inst> = (i32.clz (local.get $arg))
<temp_popcnt_inst> = (i32.popcnt (local.get $arg)) 
<temp_unop_body> = (func $operations (param $arg <temp_num_type_i32>) <temp_result_i32> (i32.add (i32.add <temp_ctz_inst> <temp_clz_inst>)<temp_popcnt_inst>))
<temp_unop_inst> = <temp_unop_body>

<temp_wrap_name> = $wrap
<temp_extend_name> = $extend
<temp_trunc_name> = $trunc
<temp_wrap_body> = <temp_num_type_i32>.wrap_i64
<temp_extend_body> = <temp_num_type_i32>.extend8_s
<temp_trunc_body> = <temp_num_type_i32>.trunc_f64_s
<temp_wrap_func> = (func <temp_wrap_name> (param $input <temp_num_type_i64>) <temp_result_i32> (<temp_wrap_body> (local.get $input)))
<temp_extend_func> = (func <temp_extend_name> (param $input <temp_num_type_i32>) <temp_result_i32> (<temp_extend_body> (local.get $input)))
<temp_trunc_func> = (func <temp_trunc_name> (param $input <temp_num_type_f64>) <temp_result_i32> (<temp_trunc_body> (local.get $input)))
<temp_export_wrap> = (export "wrap" (func <temp_wrap_name>))
<temp_export_extend> = (export "extend" (func <temp_extend_name>))
<temp_export_trunc> = (export "trunc" (func <temp_trunc_name>))
<temp_cvtop_funcs> = <temp_wrap_func> <temp_extend_func> <temp_trunc_func> <temp_export_wrap> <temp_export_extend> <temp_export_trunc>

<module_template> = <temp_ref_func>
<module_template> = <temp_data>
<module_template> = <temp_cvtop_funcs>
<module_template> = <temp_unop_inst>
<module_template> = <temp_local_opers>
<module_template> = <temp_globals>
<module_template> = <temp_funcs_even> <temp_export_is_even>
<module_template> = <temp_funcs>
<module_template> = <temp_tables>
<module_template> = <temp_elems>
<module_template> = <temp_memory>
<module_template> = <temp_store_load_func_i64> <temp_export_store> <temp_export_load>
<module_template> = <temp_store_load_func_i32> <temp_export_store> <temp_export_load>
<module_template> = <temp_store_load_func_f32>
<module_template> = <temp_store_load_func_f64>
<module_template> = <temp_loop_func>
<module_template> = <temp_start>
<module_template> = <temp_type_func>

<module_templates nonrecursive=true p=0.05> = <module_template>
<module_templates> = <module_templates> <module_template>

<module> = (module <module_templates>)

<id> = 0
<id> = 1
<id> = 2
<id> = 3
<id> = 4
<id> = 5
<id> = 6
<id> = 7
<id> = 8
<id> = 9
<min> = <num_value>
<max> = <num_value>
<limits> = <min> <max>
<elem_type> = funcref
<table_type> = <elem_type>
<table_id> = $table_<id>
<table> = (table <table_id> <limits> <table_type>)
<table_func> = (func $func_a)
<table_func> = (func $func_b)
<table_func> = (func $func_c)
<table_func> = (func $func_d)
<table_func> = (func $func_e)
<table_func> = (func $func_f)
<table_func> = (func $func_g)
<table_func> = (func $func_h)
<table_func> = (func $func_i)
<table_func> = (func $func_j)
<table_func> = (func $func_k)
<table_func> = (func $func_l)
<table_func> = (func $func_m)
<table_func> = (func $func_n)
<table_func> = (func $func_o)
<table_func> = (func $func_p)
<table_func> = (func $func_q)
<table_funcs nonrecursive=true p=0.1> = <table_func>
<table_funcs> = <table_funcs> <table_func>
<table_operation> = (func $table_operations (drop (table.size <table_id>)))
<tables nonrecursive=true p=0.1> = <table> <table_funcs> <table_operation>
<tables> = <tables> <table> <table_funcs> <table_operation>

<typy_name> = $random_type
<type> = (type <typy_name> (func (param <num_type>) (result <num_type>)))
<type_params> = (param $x <num_type>)
<type_instruction> = (<num_type>.mul (local.get $x) (<num_type>.const <num_value>))
<type_func> = <type> (func $double (type <typy_name>) <type_params> <result> <type_instruction>)

<globalname> = $globalname_a 
<globalname> = $globalname_b
<globalname> = $globalname_c
<globalname> = $globalname_d
<globalname> = $globalname_e 
<globalname> = $globalname_f
<globalname> = $globalname_g
<globalname> = $globalname_h
<global_mutability> = mut
<global_type> = <num_type>
<global_value> = <num_type>.const <num_value>
<global> = (global <globalname> (<global_mutability> <global_type>) <global_value>)
<globals nonrecursive=true p=0.1> = <global>
<globals> = <globals> <global>

<func_idx> = $arithmetic
<func_idx> = $table_operations
<func_idx> = $double
<func_idx> = $store_value
<func_idx> = $load_value
<func_idx> = $ref_operations
<func_idx> = $local_tee
<func_idx> = $sum_n
<func_idx> = $operations
<func_idx> = $store_num
<func_idx> = $set_global
<func_idx> = $get_global
<func_idx> = $wrap
<func_idx> = $extend
<func_idx> = $trunc
<func_idx> = $is_even
<offset> = <num_value>
<elem> = (elem (<num_type>.const <offset>) <func_idx>)
<elems nonrecursive=true p=0.1> = <elem>
<elems> = <elems> <elem>

<mem_name> = $mem
<mem_func_name> = $mem_func
<memory_create> = (memory <mem_name> <num_value>)
<mem_size> = (local $mem_size <num_type>)
<mem_grow> = (local $mem_grow <num_type>)
<set_size> = (local.set $mem_size (memory.size))
<set_grow> = (local.set $mem_grow (memory.grow (<num_type>.const <num_value>)))
<memory_fill> = (memory.fill (<num_type>.const <num_value>) (<num_type>.const <num_value>) (<num_type>.const <num_value>))
<memory_copy> = (memory.copy (<num_type>.const <num_value>) (<num_type>.const <num_value>) (<num_type>.const <num_value>))
<memory_init> = (memory.init <num_value> (<num_type>.const <num_value>) (<num_type>.const <num_value>) (<num_type>.const <num_value>))
<mem_func> = (func <mem_func_name> <mem_size> <mem_grow> <set_size> <set_grow> <memory_fill> <memory_copy> <memory_init>)
<memory> = <memory_create> <data> <mem_func>

<export_store> = (export "store_value" (func $store_value))
<export_load> = (export "load_value" (func $load_value)) 

<func_ref_a> = (func $func_ref_a <result> (<num_type>.const <num_value>))
<func_ref_b> = (func $func_ref_b)
<ref_null> = (ref.null func)
<ref_is_null> = (ref.is_null)
<if_null> = if <result> (then (call $func_ref_a))
<else_null> = (else (<num_type>.const <num_value>))
<ref_oper> = (func $ref_operations <result> <ref_null> <ref_is_null> (<if_null> <else_null>))
<ref_func> = <func_ref_a> <func_ref_b> <ref_oper>

<local> = (local <num_type>)
<local_set_get> = (local.set <num_value> (local.get <num_value>))
<local_tee> = (local.tee <num_value> (<num_type>.add (local.get <num_value>) (<num_type>.const <num_value>)))
<local_opers> = (func $local_tee (param <num_type>) <result> <local> <local_set_get> <local_tee>)
<local_opers> = (func $local_tee (param <num_type>) <result> <local> <local_set_get> <local_tee>) (export "local_tee" (func $local_tee))

<sum_name> = sum_n
<local_init_sum> = (local $sum <num_type>)
<local_init_i> = (local $i <num_type>)
<init_sum> = <num_type>.const <num_value> local.set $sum
<set_iter> = <num_type>.const <num_value> local.set $i
<ret_sum> = local.get $sum
<loop_terminate> = local.get $i local.get $n <num_type>.gt_s if br $loop end
<add_iter_sum> = local.get $sum local.get $i <num_type>.add local.set $sum
<incre_iter> = local.get $i <num_type>.const <num_value> <num_type>.add local.set $i
<continue_loop> = br $loop
<loop_body> = (loop $loop <loop_terminate> <add_iter_sum> <incre_iter> <continue_loop>)
<loop_func> = (func $<sum_name> (export "<sum_name>") (param $n <num_type>) <result> <local_init_sum> <local_init_i> <init_sum> <set_iter> <loop_body> <ret_sum>)

<strat_body> = (start $store_num)
<start_func> = (func $store_num (<num_type>.store (<num_type>.const <num_value>) (<num_type>.const <num_value>))) 
<start> = (memory <num_value>) (export "memory" (memory <num_value>)) <start_func> <strat_body>

<ctz_inst> = (<num_type>.ctz (local.get $arg))
<clz_inst> = (<num_type>.clz (local.get $arg))
<popcnt_inst> = (<num_type>.popcnt (local.get $arg)) 
<unop_body> = (func $operations (param $arg <num_type>) <result> (<num_type>.add (<num_type>.add <ctz_inst> <clz_inst>)<popcnt_inst>))
<unop_inst> = <unop_body>

<result> = (result <num_type>)

<num_type> = i32 
<num_type> = i64 
<num_type> = f32 
<num_type> = f64

<num_value> = -1
<num_value> = 0
<num_value> = 2147483647
<num_value> = 1024
<num_value> = 3
<num_value> = 4
<num_value> = 52346654
<num_value> = -8465473543.234234
<num_value> = 1
<num_value> = 9223372036854775807
<num_value> = -9223372036854775807
<num_value> = 4
<num_value> = 0.0
<num_value> = 2147483647.0
<num_value> = -2147483647.0
<num_value> = 2.0
<num_value> = 3.0
<num_value> = -678234928375235
<num_value> = -873284678
<num_value> = -5345345346
<num_value> = -8
<num_value> = -16
<num_value> = -32
<num_value> = 523.834759734
<num_value> = -8465473543.4387534
<num_value> = -64
<num_value> = -128
<num_value> = -256
<num_value> = -512
<num_value> = -1024.345345
<num_value> = 4.0
<num_value> = 1.0
<num_value> = 9223372036854775807.0
<num_value> = -9223372036854775807.0
<num_value> = 8
<num_value> = 16
<num_value> = 32
<num_value> = 64
<num_value> = 128
<num_value> = 256
<num_value> = 512
<num_value> = 1024
<num_value> = -2452346536.5345346
<num_value> = 758394
<num_value> = 989234678

<data> = (data (<num_type>.const <num_value>) "Hello, WebAssembly!こんにちは、WebAssembly！こんにちは🌸你好🐼안녕하🦄Hej🌻안녕하세요💫こんにちは🍣🌍नमस्ते🕌सभी🌊کے🌹Buenos días🌴🍉🍍🍋🍊🍇🍒🍓🥑🥝🥥🥒🥔🥕세요🌺Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🐘नमस्ते🕌ਸਤਸ੍ਰੀਅਕਾਲ🌄")
<data> = (data (<num_type>.const <num_value>) "こんにちは🌸안녕하세요🌺🚀你好🐼Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🐘नमस्ते🕌🌄❤️🎉🎶🌈🏞🐬🏄‍♂️🏯\00\00\80\3Fこんにちは、WebAssembly！") 
<data> = (data (<num_type>.const <num_value>) "こんにちは、WebAssembly！🌞Grüßgott🦉🦄Hej🌻안녕하세요💫こんにちは🍣🌍नमस्ते🕌सभी🌊کے🌹Buenos días🌴🍉🍍🍋🍊🍇Buenos días🌴🍉🍍🍋🍊🍇🍒🍓🥑🥝🥥🥒🥔🥕세요🌺Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครั🍒🍓🥑🥝🥥🥒🥔🥕🥨") 
<data> = (data (<num_type>.const <num_value>) "®🦀🏰Olá🐾🦜Привет🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾こんにちは、WebAssembly！") 
<data> = (data (<num_type>.const <num_value>) "こんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🚀CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌐CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌟CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌟CiaoGutenTag👯⛔こんにちは、こんにちは🌸안녕하세요🌺🚀你好🐼Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🐘नमस्ते🕌🌄❤️🎉🎶🌈🏞🐬🏄‍♂️🏯🌲🌳🌱🌰WebAssembly！") 
<data> = (data (<num_type>.const <num_value>) "🌀📂🎯🐑🌀Привет, こんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🌎CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🚀CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🌐CiaoGutenTagмир!📂📝⬇️🏃‍♀️✨📦📂📝⬇️🏃‍♀️✨📦")
<data> = (data (<num_type>.const <num_value>) "こんにちは안녕하세요你好🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלום🐑🌀Привет, мир!📂⚠️") 
<data> = (data (<num_type>.const <num_value>) "🐑🌀⬇️Merhabaこんにちは안🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾녕하세요你好OiHejCześćПриветSelamสวัสดีครับTereTjenaJamboSalutonLabasHeiЗдравоHalloAhojSziasztokMoi🏃‍♀️✨🏃‍♀️✨📦📂📝⬇️📦📂") 
<data> = (data (<num_type>.const <num_value>) "🌀📂ПриветnjourHolaש🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾לוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🚀CiaoGutenTagこん, мир!ℹ️") 
<data> = (data (<num_type>.const <num_value>) "👯🏃‍♀️✨📦📂📝⬇️⛔🏃‍♀️🦄Hej🌻안녕하세요💫こんにちは🍣🌍नमस्ते🕌सभी🌊کے🌹Buenos días🌴🍉🍍🍋🍊🍇🍒🍓🥑你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにち🥝🥥🥒🥔🥕✨📦📂📝⬇️🌀📂") 
<data> = (data (<num_type>.const <num_value>) "🌀⬇️🏃‍♀️✨Hell🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲你好🐼안녕하🦄Hej🌻안녕하세요💫こんにちは🍣🌍नमस्ते🕌सभी🌊کے🌹Bueno🌳🌱🌰🌻🌼🌷o, Привет, мир!!こんにちは、WebAssembly📦📂") 
<data> = (data (<num_type>.const <num_value>) "🐑🌀Привет, мир!jourHolaשלוםЗдравствуйт🌾🌺🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלום🐑🌀Привет, ми📂®🦀") 
<data> = (data (<num_type>.const <num_value>) "🌀🏃‍♀️✨📦📂🐑🌀ПрПривет🌴🌵🌷🌸🌹🌺🌻🌼💐🍁🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹ивет, мтеสวัสดีครับनमस्तेسلام🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับир!📂📝⬇️🏃‍♀️📂🦀") 
<data> = (data (<num_type>.const <num_value>) "にちは🌀🐑🌀🌟CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับनमस्तेسلام🌟CiaoGutenTag👯⛔こんにちは、こんにちは🌸안녕하세요🌺🚀你好🐼Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🐘नमस्ते🕌🌄❤️🎉🎶🌈🏞🐬🏄‍♂️🏯🌲🌳🌱🌰WebAssemblyПривет, мир!📂📂🔧") 
<data> = (data (<num_type>.const <num_value>) "👯⛔🌀📂®🦀こんにち🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGuteBuenos días🌴🍉🍍🍋🍊🍇🍒🍓🥑🥝🥥🥒🥔🥕세요🌺Bonjour🥐Hola🌮שלום🕍Здравствуйте🐻สวัสดีครัnTagこんにちは안녕하세요नमस्ते🌍Ciは") 
<data> = (data (<num_type>.const <num_value>) "🌀👯⛔📂🐑🌀Привет, мир!🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾こんにちはтеสวัสดีครับनमस्तेسلام🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับ、Web📂🏃‍♀️✨📦📂📝⬇️") 
<data> = (data (<num_type>.const <num_value>) "🐑🌀Привет, мир!📂Hello, !こんにちは、WebAssembly🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut🐑") 
<data> = (data (<num_type>.const <num_value>) "🌀📂🎯📝⬇️🏃‍♀️✨📦📂📝⬇️Hola🌮שלום🕍Здравствуйте🐻สวัสดีครับ🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut🐘नमस्ते🕌🌄❤️🎉🎶🌈🏞🐬🏄‍♂️🏯\00\00\80\3Fこんにちは、WebAsse📂") 
<data> = (data (<num_type>.const <num_value>) "👯⛔🏃‍♀️✨📦📂🏃‍♀️✨📦📂📝⬇️📝⬇️🌻🌼🌷🌹🌸🌾🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾こんにтеสวัสดีครับनमस्तेسلام🌍CiaoGutenTagこんにちは안녕하세요你好BonjourHolaשלוםЗдравствуйтеสวัสดีครับちは、Web🌀📂") 
<data> = (data (<num_type>.const <num_value>) "🌀📂🎯Hello, Привет, мир!!こんにちは、WebAssembly📝🌀📂ℹ️🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut⬇️📂") 
<data> = (data (<num_type>.const <num_value>) "にちは🌀🏃‍♀️✨🐑🌀Привет, мир!📂📦📂🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍C📝⬇️🏃‍♀️📂") 
<data> = (data (<num_type>.const <num_value>) "🌀📂🎯📝⬇️🏃‍♀️✨📦📂📝⬇️🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีค🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGutรับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍C📂") 
<data> = (data (<num_type>.const <num_value>) "👯⛔🏃‍♀️✨📦📂🐑🌀Привет, мир!📂📝⬇️🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍C🌀📂") 
<data> = (data (<num_type>.const <num_value>) "にちは🌀🏃‍♀️✨📦📂📝⬇️🏃‍♀️🍂🍃🍀🌿☘️🌾🌺🌻🌼🌷🌹🌸🌾🌾🌿🌵🌴🌲еสวัสดีครับםЗдравствуйтеสวัสดีครับनमस्ते🌍CiaoGutenTagこんにちは안녕하세요नमस्ते🌍CiaoGut🌿🌵🌴🌲🌳🌱🌰🌻🌼🌷🌹🌸🌺🌾こんにちは、WebAssembly📂") 
<datas nonrecursive=true p=0.1> = <data>
<datas> = <datas> <data>

<address> = $address
<value> = $value
<param_addr> = (param <address> <num_type>)
<param_value> = (param <value> <num_type>)
<store_body> = (<num_type>.store (local.get <address>) (local.get <value>))
<store_func> = (func $store_value <param_addr> <param_value> <store_body>)
<load_body> = (<num_type>.load (local.get <address>))
<load_func> = (func $load_value <param_addr> <result> <load_body>)

<global_name> = $global
<set_global> = (func $set_global (param <value> <num_type>) local.get <value> global.set <global_name>)
<get_global> = (func $get_global <result> global.get <global_name>)

<cvtop_name> = wrap
<cvtop_name> = extend
<cvtop_name> = trunc
<cvtop_body> = <num_type>.wrap_i64
<cvtop_body> = <num_type>.extend8_s
<cvtop_body> = <num_type>.trunc_f64_s
<cvtop_func> = (func <cvtop_name> (param $input <num_type>) <result> (<cvtop_body> (local.get $input)))
<cvtop_export> = (export "cvtop_name" (func $<cvtop_name>))
<cvtop_funcs nonrecursive=true p=0.1> = <cvtop_func> <cvtop_export>
<cvtop_funcs> = <cvtop_funcs> <cvtop_func> <cvtop_export>

<vec_type> = v128
<ref_kind> = func
<ref_kind> = extern
<ref_type> = funcref 
<ref_type> = externref
<val_type> = <vec_type>
<val_type> = <ref_type>
<val_type> = <num_type>
<vec_shape> = i8x16
<vec_shape> = i16x8 
<vec_shape> = i32x4 
<vec_shape> = i64x2 
<vec_shape> = f32x4 
<vec_shape> = f64x2 
<vec_shape> = v128
<sign> = s 
<sign> = u
<vec_var> = lane
<vec_var> = splat
<vec_var> = zero
<unop> = ctz 
<unop> = clz
<unop> = popcnt
<binop> = add
<binop> = sub
<binop> = mul
<binop> = div
<testop> = eqz
<relop> = eq 
<relop> = ne 
<relop> = lt

<vecunop> = abs 
<vecunop> = neg 
<vecbinop> = add 
<vecbinop> = sub
<vecbinop> = min_<sign>
<vecternop> = bitselect
<vectestop> = all_true
<vectestop> = any_true
<vecrelop> = eq 
<vecrelop> = ne
<vecrelop> = lt
<veccvtop> = extend_low 
<veccvtop> = extend_high
<veccvtop> = trunc_sat
<vecshiftop> = shl
<vecshiftop> = shr_<sign>
<cvtop> = wrap
<cvtop> = extend
<cvtop> = trunc

<var> = $general_var_a
<var> = $general_var_b
<var> = $general_var_c
<var> = $general_var_d
<var> = $general_var_e
<var> = $general_var_f
<var> = $general_var_g
<var> = $general_var_h
<var> = $general_var_i
<var> = $general_var_j
<var> = $general_var_k
<var> = $general_var_l
<var> = $general_var_m
<var> = $general_var_n
<var> = $general_var_o

<general_func_instr> = unreachable
<general_func_instr> = nop
<general_func_instr> = br <var>
<general_func_instr> = br_if <var>
<general_func_instr> = br_table <var>
<general_func_instr> = return
<general_func_instr> = call <var>
<general_func_instr> = call_indirect <general_func_type>
<general_func_instr> = drop
<general_func_instr> = select
<general_func_instr> = local.get <var>
<general_func_instr> = local.set <var>
<general_func_instr> = local.tee <var>
<general_func_instr> = global.get <var>
<general_func_instr> = global.set <var>
<general_func_instr> = table.get 
<general_func_instr> = table.set 
<general_func_instr> = table.size 
<general_func_instr> = table.grow 
<general_func_instr> = table.fill 
<general_func_instr> = table.get <var>
<general_func_instr> = table.set <var>
<general_func_instr> = table.size <var>
<general_func_instr> = table.grow <var>
<general_func_instr> = table.fill <var>
<general_func_instr> = table.copy <var> <var>
<general_func_instr> = table.init <var> <var>
<general_func_instr> = elem.drop <var>
<general_func_instr> = <num_type>.load(8_<sign>)
<general_func_instr> = <num_type>.load(16_<sign>)
<general_func_instr> = <num_type>.load(32_<sign>)
<general_func_instr> = <num_type>.store8
<general_func_instr> = <num_type>.store16
<general_func_instr> = <num_type>.store32
<general_func_instr> = <vec_type>.load(8x8_<sign>)
<general_func_instr> = <vec_type>.load(16x4_<sign>)
<general_func_instr> = <vec_type>.load(32x2_<sign>)
<general_func_instr> = <vec_type>.store
<general_func_instr> = <vec_type>.load8_<vec_var>)
<general_func_instr> = <vec_type>.load16_<vec_var>)
<general_func_instr> = <vec_type>.load32_<vec_var>)
<general_func_instr> = <vec_type>.load64_<vec_var>)
<general_func_instr> = <vec_type>.store8_lane
<general_func_instr> = <vec_type>.store16_lane
<general_func_instr> = <vec_type>.store32_lane
<general_func_instr> = <vec_type>.store64_lane
<general_func_instr> = memory.size
<general_func_instr> = memory.grow
<general_func_instr> = memory.fill
<general_func_instr> = memory.copy
<general_func_instr> = memory.init <var>
<general_func_instr> = data.drop <var>
<general_func_instr> = ref.null <ref_kind>
<general_func_instr> = ref.is_null <ref_kind>
<general_func_instr> = ref.func <var>
<general_func_instr> = <num_type>.const <num_value>
<general_func_instr> = <num_type>.<unop>
<general_func_instr> = <num_type>.<binop>
<general_func_instr> = <num_type>.<testop>
<general_func_instr> = <num_type>.<relop>
<general_func_instr> = <num_type>.<cvtop>_<num_type>_<sign>
<general_func_instr> = <num_type>.<cvtop>_<num_type>
<general_func_instr> = <vec_type>.const <vec_shape> <num_value>
<general_func_instr> = <vec_shape>.<vecunop>
<general_func_instr> = <vec_shape>.<vecbinop>
<general_func_instr> = <vec_shape>.<vecternop>
<general_func_instr> = <vec_shape>.<vectestop>
<general_func_instr> = <vec_shape>.<vecrelop>
<general_func_instr> = <vec_shape>.<veccvtop>_<vec_shape>_<sign>
<general_func_instr> = <vec_shape>.<veccvtop>_<vec_shape>
<general_func_instr> = <vec_shape>.<vecshiftop>
<general_func_instr> = <vec_shape>.bitmask
<general_func_instr> = <vec_shape>.splat

<general_func_instrs nonrecursive=true p=0.1> = <general_func_instr>
<general_func_instrs> = <general_func_instrs> <general_func_instr>

<general_func_param> = (param <val_type>)
<general_func_params nonrecursive=true p=0.1> = <general_func_param>
<general_func_params> = <general_func_params> <general_func_param>

<general_func_result> = (result <val_type>)
<general_func_results nonrecursive=true p=0.1> = <general_func_result>
<general_func_results> = <general_func_results> <general_func_result>

<general_func_local> = (local <val_type>)
<general_func_locals nonrecursive=true p=0.1> = <general_func_local>
<general_func_locals> = <general_func_locals> <general_func_local>

<general_func_type> = <general_func_params> <general_func_results>
<general_func> = (func <general_func_type> <general_func_locals> <general_func_instrs>)

<func> = <cvtop_funcs>
<func> = <func_arithmetic> 
<func> = <funcs_even> <export_is_even>
<func> = <set_global> <get_global> 
<func> = <table_operation>
<func> = <type_func>
<func> = <store_func> <export_store>
<func> = <load_func> <export_load>
<func> = <ref_func>
<func> = <local_opers>
<func> = <loop_func>
<func> = <start>
<func> = <unop_body>
<func> = <mem_func>
<func> = <general_func>

<funcs nonrecursive=true p=0.1> = <func>
<funcs> = <funcs> <func>

<module> = (module <globals> <memory> <datas> <elems> <tables> <funcs>)

!begin lines
<module>
!end lines

