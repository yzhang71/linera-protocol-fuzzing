<num_type_i32> = i32 
<num_type_i64> = i64 
<num_type_f32> = f32 
<num_type_f64> = f64
<funcname> = arithmetic
<varname_a> = $var_a 
<varname_b> = $var_b
<varname_c> = $var_c 
<varname_d> = $var_d
<varname_e> = $var_e 
<varname_f> = $var_f
<varname_g> = $var_g 
<varname_h> = $var_h
<params_i32> = (param <varname_a> <num_type_i32>) (param <varname_b> <num_type_i32>) 
<params_i64> = (param <varname_c> <num_type_i64>) (param <varname_d> <num_type_i64>)
<params_f32> = (param <varname_e> <num_type_f32>) (param <varname_f> <num_type_f32>)
<params_f64> = (param <varname_g> <num_type_f64>) (param <varname_h> <num_type_f64>)
<result_i32> = (result <num_type_i32>)
<result_i64> = (result <num_type_i64>)
<result_f32> = (result <num_type_f32>)
<result_f64> = (result <num_type_f64>)
<instruction_i32> = get_local <varname_a> get_local <varname_b> <num_type_i32>.add
<instruction_i32> = get_local <varname_a> get_local <varname_b> <num_type_i32>.div
<instruction_i32> = get_local <varname_a> get_local <varname_b> <num_type_i32>.sub
<instruction_i32> = get_local <varname_a> get_local <varname_b> <num_type_i32>.mul
<instruction_i64> = get_local <varname_c> get_local <varname_d> <num_type_i64>.add
<instruction_i64> = get_local <varname_c> get_local <varname_d> <num_type_i64>.div
<instruction_i64> = get_local <varname_c> get_local <varname_d> <num_type_i64>.sub
<instruction_i64> = get_local <varname_c> get_local <varname_d> <num_type_i64>.mul
<instruction_f32> = get_local <varname_e> get_local <varname_f> <num_type_f32>.add
<instruction_f32> = get_local <varname_e> get_local <varname_f> <num_type_f32>.div
<instruction_f32> = get_local <varname_e> get_local <varname_f> <num_type_f32>.sub
<instruction_f32> = get_local <varname_e> get_local <varname_f> <num_type_f32>.mul
<instruction_f64> = get_local <varname_g> get_local <varname_h> <num_type_f64>.add
<instruction_f64> = get_local <varname_g> get_local <varname_h> <num_type_f64>.div
<instruction_f64> = get_local <varname_g> get_local <varname_h> <num_type_f64>.sub
<instruction_f64> = get_local <varname_g> get_local <varname_h> <num_type_f64>.mul
<instructions_i32> = <instruction_i32>
<instructions_i64> = <instruction_i64>
<instructions_f32> = <instruction_f32>
<instructions_f64> = <instruction_f64>
<func> = (func $<funcname> <params_i32> <result_i32> <instructions_i32>)
<func> = (func $<funcname> <params_i64> <result_i64> <instructions_i64>)
<func> = (func $<funcname> <params_f32> <result_f32> <instructions_f32>)
<func> = (func $<funcname> <params_f64> <result_f64> <instructions_f64>)

<rem_i32> = rem_i32
<set_rem_i32> = (set_local $<rem_i32> (<num_type_i32>.rem_u (get_local <varname_a>) (<num_type_i32>.const 2)))
<get_rem_i32> = (<num_type_i32>.eqz (get_local $<rem_i32>))
<local_rem_i32> = (local $<rem_i32> <num_type_i32>)
<func_body_even> = <local_rem_i32> <set_rem_i32> <get_rem_i32>
<params_i32_even> = (param <varname_a> <num_type_i32>)
<funcname_even> = is_even
<export_is_even> = (export "<funcname_even>" (func $<funcname_even>))
<funcs_even> = (func $<funcname_even> <params_i32_even> <result_i32> <func_body_even>)

<set_func_i32> = (func $set_global (param $value i32) get_local $value set_global $globalname_a)
<get_func_i32> = (func $get_global <result_i32> get_global $globalname_a)
<set_func_i64> = (func $set_global (param $value i64) get_local $value set_global $globalname_b)
<get_func_i64> = (func $get_global (result i64) get_global $globalname_b)
<set_func_f32> = (func $set_global (param $value f32) get_local $value set_global $globalname_c)
<get_func_f32> = (func $get_global (result f32) get_global $globalname_c)
<set_func_f64> = (func $set_global (param $value f64) get_local $value set_global $globalname_d)
<get_func_f64> = (func $get_global (result f64) get_global $globalname_d)
<set_func_i32> = (func $set_global (param $value i32) get_local $value set_global $globalname_e)
<get_func_i32> = (func $get_global <result_i32> get_global $globalname_e)
<set_func_i64> = (func $set_global (param $value i64) get_local $value set_global $globalname_f)
<get_func_i64> = (func $get_global (result i64) get_global $globalname_f)
<set_func_f32> = (func $set_global (param $value f32) get_local $value set_global $globalname_g)
<get_func_f32> = (func $get_global (result f32) get_global $globalname_g)
<set_func_f64> = (func $set_global (param $value f64) get_local $value set_global $globalname_h)
<get_func_f64> = (func $get_global (result f64) get_global $globalname_h)

<funcs> = <func>
<funcs> = <set_func_i32> <get_func_i32> <func>
<funcs> = <set_func_i64> <get_func_i64> <func>
<funcs> = <set_func_f32> <get_func_f32> <func>
<funcs> = <set_func_f64> <get_func_f64> <func>

<globalname_a> = $globalname_a 
<globalname_b> = $globalname_b
<globalname_c> = $globalname_c
<globalname_d> = $globalname_d
<globalname_e> = $globalname_e 
<globalname_f> = $globalname_f
<globalname_g> = $globalname_g
<globalname_h> = $globalname_h
<global_type_i32> = i32 
<global_type_i64> = i64 
<global_type_f32> = f32
<global_type_f64> = f64
<global_mutability> = mut
<global_value_i32> = i32.const <i32value>
<global_value_i64> = i64.const <i64value>
<global_value_f32> = f32.const <f32value>
<global_value_f64> = f64.const <f64value>
<i32value> = 0
<i32value> = 2147483647
<i32value> = 1024
<i32value> = 3
<i32value> = 4
<i64value> = 0
<i64value> = 1
<i64value> = 9223372036854775807
<i64value> = 3
<i64value> = 4
<f32value> = 0.0
<f32value> = 2147483647.0
<f32value> = 2.0
<f32value> = 3.0
<f32value> = 4.0
<f64value> = 1.0
<f64value> = 9223372036854775807.0
<f64value> = 3.0
<f64value> = 4.0
<i32global> = (global <globalname_a> (<global_mutability> <global_type_i32>) <global_value_i32>)
<i64global> = (global <globalname_b> (<global_mutability> <global_type_i64>) <global_value_i64>)
<f32global> = (global <globalname_c> (<global_mutability> <global_type_f32>) <global_value_f32>)
<f64global> = (global <globalname_d> (<global_mutability> <global_type_f64>) <global_value_f64>)
<i32global_mut> = (global <globalname_e> (<global_mutability> <global_type_i32>) <global_value_i32>)
<i64global_mut> = (global <globalname_f> (<global_mutability> <global_type_i64>) <global_value_i64>)
<f32global_mut> = (global <globalname_g> (<global_mutability> <global_type_f32>) <global_value_f32>)
<f64global_mut> = (global <globalname_h> (<global_mutability> <global_type_f64>) <global_value_f64>)
<globals> = <i32global> <i64global> <f32global> <f64global> <i32global_mut> <i64global_mut> <f32global_mut> <f64global_mut>

<elem_type> = funcref
<table_type> = <limits> <elem_type>
<limits> = <min> 
<limits> = <max>
<integer> = 1562321
<integer> = 2156871
<integer> = 6456
<integer> = 0
<min> = <integer>
<max> = <integer>
<table> = (table <table_id> <table_type>)
<table_id> = $table_1
<elem> = (elem (i32.const <offset>) <func_idx>)
<offset> = <integer>
<func_idx> = $<funcname>
<tables> = <table>
<table_func> = (func $func_a)
<table_func> = (func $func_b)
<table_func> = (func $func_c)
<table_func> = (func $func_d)
<table_func> = (func $func_e)
<table_func> = (func $func_f)
<table_func> = (func $func_g)
<table_func> = (func $func_h)
<table_operation> = (func $table_operations (drop (table.size <table_id>)))
<tables> = <table_func> <table> <table_operation>
<elems> = <elem> <elem> <elem>
<elems> = <elem> <elem> 
<elems> = <elem>

<typy_name> = $func_i64_i64
<type> = (type <typy_name> (func (param <num_type_i64>) (result <num_type_i64>)))
<type_params_i64> = (param $x <num_type_i64>)
<type_instruction_i64> = (<num_type_i64>.mul (local.get $x) (i64.const <integer>))
<type_func> = <type> (func $double_i64 (type <typy_name>) <type_params_i64> <result_i64> <type_instruction_i64>)

<size_of_page> = 1 
<size_of_page> = 8
<size_of_page> = 16
<size_of_page> = 32
<size_of_page> = 64
<size_of_page> = 128
<size_of_page> = 256
<size_of_page> = 512
<size_of_page> = 1024
<mem_name> = $mem
<mem_func_name> = $mem_func
<memory_create> = (memory <mem_name> <size_of_page>)
<memory> = <memory_create> <data> <mem_func>
<mem_size> = (local $mem_size <num_type_i32>)
<mem_grow> = (local $mem_grow <num_type_i32>)
<set_size> = (local.set $mem_size (memory.size))
<set_grow> = (local.set $mem_grow (memory.grow (<num_type_i32>.const 1)))
<memory_fill> = (memory.fill (<num_type_i32>.const 1024) (<num_type_i32>.const 42) (<num_type_i32>.const 100))
<memory_copy> = (memory.copy (<num_type_i32>.const 1124) (<num_type_i32>.const 1024) (<num_type_i32>.const 100))
<memory_init> = (memory.init 0 (<num_type_i32>.const 1224) (<num_type_i32>.const 0) (<num_type_i32>.const 13))
<mem_func> = (func <mem_func_name> <mem_size> <mem_grow> <set_size> <set_grow> <memory_fill> <memory_copy> <memory_init>)

<address> = $address
<value> = $value
<param_addr_i32> = (param <address> i32)
<param_value_i32> = (param <value> i32)
<store_body_i32> = (i32.store (get_local <address>) (get_local <value>))
<store_func_i32> = (func $store_value <param_addr_i32> <param_value_i32> <store_body_i32>)
<load_body_i32> = (i32.load (get_local <address>))
<load_func_i32> = (func $load_value <param_addr_i32> <result_i32> <load_body_i32>)
<store_load_func_i32> = <store_func_i32> <load_func_i32>

<param_addr_f32> = (param <address> i32)
<param_value_f32> = (param <value> f32)
<store_body_f32> = (f32.store (get_local <address>) (get_local <value>))
<store_func_f32> = (func $store_value <param_addr_f32> <param_value_f32> <store_body_f32>)
<load_body_f32> = (f32.load (get_local <address>))
<load_func_f32> = (func $load_value <param_addr_f32> <result_f32> <load_body_f32>)
<store_load_func_f32> = <store_func_f32> <load_func_f32>

<param_addr_f64> = (param <address> i32)
<param_value_f64> = (param <value> f64)
<store_body_f64> = (f64.store (get_local <address>) (get_local <value>))
<store_func_f64> = (func $store_value <param_addr_f64> <param_value_f64> <store_body_f64>)
<load_body_f64> = (f64.load (get_local <address>))
<load_func_f64> = (func $load_value <param_addr_f64> <result_f64> <load_body_f64>)
<store_load_func_f64> = <store_func_f64> <load_func_f64>

<param_addr_i64> = (param <address> i32)
<param_value_i64> = (param <value> i64)
<store_body_i64> = (i64.store (get_local <address>) (get_local <value>))
<store_func_i64> = (func $store_value <param_addr_i64> <param_value_i64> <store_body_i64>)
<load_body_i64> = (i64.load (get_local <address>))
<load_func_i64> = (func $load_value <param_addr_i64> <result_i64> <load_body_i64>)
<store_load_func_i64> = <store_func_i64> <load_func_i64>

<export_store> = (export "store_value" (func $store_value))
<export_load> = (export "load_value" (func $load_value))

<data> = (data (<num_type_i32>.const 0) "Hello, WebAssembly!")
<data> = (data (<num_type_i32>.const 2) "\00\00\80\3F") 
<data> = (data (<num_type_i32>.const 4) "こんにちは、WebAssembly！") 
<data> = (data (<num_type_i32>.const 8) "®🦀") 
<data> = (data (<num_type_i32>.const 16) "👯⛔") 
<data> = (data (<num_type_i32>.const 32) "🌀📂") 

<func_ref_a> = (func $func_ref_a <result_i32> (<num_type_i32>.const 42))
<func_ref_b> = (func $func_ref_b)
<ref_null> = (ref.null func)
<ref_is_null> = (ref.is_null)
<if_null> = if <result_i32> (then (call $func_ref_a))
<else_null> = (else (i32.const 0))
<ref_oper> = (func $ref_operations <result_i32> <ref_null> <ref_is_null> (<if_null> <else_null>))
<ref_func> = <func_ref_a> <func_ref_b> <ref_oper>

<local_i32> = (local i32)
<local_set_get> = (local.set 0 (local.get 0))
<local_tee> = (local.tee 0 (i32.add (local.get 0) (i32.const 1)))
<local_opers> = (func $local_tee (param i32) <result_i32> <local_i32> <local_set_get> <local_tee>)
<local_opers> = (func $local_tee (param i32) <result_i32> <local_i32> <local_set_get> <local_tee>) (export "local_tee" (func $local_tee))

<sum_name> = sum_n
<local_init_sum> = (local $sum <num_type_i32>)
<local_init_i> = (local $i <num_type_i32>)
<init_sum> = <num_type_i32>.const 0 local.set $sum
<set_iter> = <num_type_i32>.const 1 local.set $i
<ret_sum> = local.get $sum
<loop_terminate> = local.get $i local.get $n i32.gt_s if br $loop end
<add_iter_sum> = local.get $sum local.get $i i32.add local.set $sum
<incre_iter> = local.get $i i32.const 1 i32.add local.set $i
<continue_loop> = br $loop
<loop_body> = (loop $loop <loop_terminate> <add_iter_sum> <incre_iter> <continue_loop>)
<loop_func> = (func $<sum_name> (export "<sum_name>") (param $n <num_type_i32>) <result_i32> <local_init_sum> <local_init_i> <init_sum> <set_iter> <loop_body> <ret_sum>)

<strat_body> = (start $store_num)
<start_func> = (func $store_num (<num_type_i32>.store (<num_type_i32>.const 0) (<num_type_i32>.const 42))) 
<start> = (memory 1) (export "memory" (memory 0)) <start_func> <strat_body>

<ctz_inst> = (i32.ctz (local.get $arg))
<clz_inst> = (i32.clz (local.get $arg))
<popcnt_inst> = (i32.popcnt (local.get $arg)) 
<unop_body> = (func $operations (param $arg <num_type_i32>) <result_i32> (i32.add (i32.add <ctz_inst> <clz_inst>)<popcnt_inst>))
<unop_inst> = <unop_body>

<wrap_name> = $wrap
<extend_name> = $extend
<trunc_name> = $trunc
<wrap_body> = <num_type_i32>.wrap_i64
<extend_body> = <num_type_i32>.extend8_s
<trunc_body> = <num_type_i32>.trunc_f64_s
<wrap_func> = (func <wrap_name> (param $input <num_type_i64>) <result_i32> (<wrap_body> (local.get $input)))
<extend_func> = (func <extend_name> (param $input <num_type_i32>) <result_i32> (<extend_body> (local.get $input)))
<trunc_func> = (func <trunc_name> (param $input <num_type_f64>) <result_i32> (<trunc_body> (local.get $input)))
<export_wrap> = (export "wrap" (func <wrap_name>))
<export_extend> = (export "extend" (func <extend_name>))
<export_trunc> = (export "trunc" (func <trunc_name>))
<cvtop_funcs> = <wrap_func> <extend_func> <trunc_func> <export_wrap> <export_extend> <export_trunc>

<module> = (module <ref_func> <data> <cvtop_funcs> <unop_inst> <local_opers> <data> <globals> <funcs_even> <export_is_even> <funcs> <tables> <elems> <memory> <store_load_func_i64> <export_store> <export_load>)
<module> = (module <local_opers> <cvtop_funcs> <loop_func> <ref_func> <globals> <unop_inst> <funcs> <tables> <funcs_even> <export_is_even> <elems> <memory> <store_load_func_i32> <export_store> <export_load>)
<module> = (module <ref_func> <local_opers> <memory> <funcs_even> <cvtop_funcs> <tables> <export_is_even> <data> <data> <store_load_func_f32> <export_store> <export_load>)
<module> = (module <local_opers> <unop_inst> <cvtop_funcs> <loop_func> <start> <ref_func> <globals> <funcs> <funcs_even> <export_is_even> <tables> <elems>)
<module> = (module <local_opers> <ref_func> <globals> <data> <data> <unop_inst> <cvtop_funcs> <start>)
<module> = (module <cvtop_funcs> <loop_func> <local_opers> <start> <ref_func> <funcs_even> <unop_inst> <export_is_even>)
<module> = (module <local_opers> <start> <ref_func> <cvtop_funcs> <type_func> <unop_inst> <data> <data>)
<module> = (module <local_opers> <ref_func> <cvtop_funcs> <type_func> <memory> <unop_inst> <tables> <funcs_even> <export_is_even> <data> <data> <store_load_func_f64> <export_store> <export_load>)
<module> = (module <loop_func> <local_opers> <start> <ref_func> <cvtop_funcs> <unop_inst> <globals> <funcs_even> <tables> <export_is_even> <funcs> (export "<funcname>" (func $<funcname>)))

!begin lines
<module>;
!end lines

