(module (func $sum_n (export "sum_n") (param $n i32) (result i32) (local $sum i32) (local $i i32) i32.const 0 local.set $sum i32.const 1 local.set $i (loop $loop local.get $i local.get $n i32.gt_s if br $loop end local.get $sum local.get $i i32.add local.set $sum local.get $i i32.const 1 i32.add local.set $i br $loop) local.get $sum) (memory 1) (export "memory" (memory 0)) (func $store_num (i32.store (i32.const 0) (i32.const 42))) (start $store_num) (func $func_h) (table $table_1 0 funcref) (func $table_operations (drop (table.size $table_1))) (global $globalname_a (mut i32) i32.const 4) (global $globalname_b (mut i64) i64.const 4) (global $globalname_c (mut f32) f32.const 4.0) (global $globalname_d (mut f64) f64.const 3.0) (global $globalname_e (mut i32) i32.const 2147483647) (global $globalname_f (mut i64) i64.const 0) (global $globalname_g (mut f32) f32.const 0.0) (global $globalname_h (mut f64) f64.const 4.0) (func $store_value (param $address i32) (param $value f64) (f64.store (get_local $address) (get_local $value))) (func $load_value (param $address i32) (result f64) (f64.load (get_local $address))) (func $func_ref_a (result i32) (i32.const 42)) (func $func_ref_b) (func $ref_operations (result i32) (ref.null func) (ref.is_null) (if (result i32) (then (call $func_ref_a)) (else (i32.const 0)))) (func $set_global (param $value f32) get_local $value set_global $globalname_g) (func $get_global (result f32) get_global $globalname_c) (func $arithmetic (param $var_g f64) (param $var_h f64) (result f64) get_local $var_g get_local $var_h f64.add) (func $is_even (param $var_a i32) (result i32) (local $rem_i32 i32) (set_local $rem_i32 (i32.rem_u (get_local $var_a) (i32.const 2))) (i32.eqz (get_local $rem_i32))) (export "is_even" (func $is_even)))