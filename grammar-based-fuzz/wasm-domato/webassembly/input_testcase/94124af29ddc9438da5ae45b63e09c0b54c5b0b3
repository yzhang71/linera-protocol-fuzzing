(module (func $set_global (param $value f32) get_local $value set_global $globalname_c) (func $get_global (result f32) get_global $globalname_g) (func $arithmetic (param $var_e f32) (param $var_f f32) (result f32) get_local $var_e get_local $var_f f32.sub) (global $globalname_a (mut i32) i32.const 2147483647) (global $globalname_b (mut i64) i64.const 0) (global $globalname_c (mut f32) f32.const 2147483647.0) (global $globalname_d (mut f64) f64.const 1.0) (global $globalname_e (mut i32) i32.const 2147483647) (global $globalname_f (mut i64) i64.const 9223372036854775807) (global $globalname_g (mut f32) f32.const 3.0) (global $globalname_h (mut f64) f64.const 9223372036854775807.0) (func $sum_n (export "sum_n") (param $n i32) (result i32) (local $sum i32) (local $i i32) i32.const 0 local.set $sum i32.const 1 local.set $i (loop $loop local.get $i local.get $n i32.gt_s if br $loop end local.get $sum local.get $i i32.add local.set $sum local.get $i i32.const 1 i32.add local.set $i br $loop) local.get $sum) (memory 1) (export "memory" (memory 0)) (func $store_num (i32.store (i32.const 0) (i32.const 42))) (start $store_num) (func $operations (param $arg i32) (result i32) (i32.add (i32.add (i32.ctz (local.get $arg)) (i32.clz (local.get $arg)))(i32.popcnt (local.get $arg)))) (func $func_ref_a (result i32) (i32.const 42)) (func $func_ref_b) (func $ref_operations (result i32) (ref.null func) (ref.is_null) (if (result i32) (then (call $func_ref_a)) (else (i32.const 0)))) (func $store_value (param $address i32) (param $value i32) (i32.store (get_local $address) (get_local $value))) (func $load_value (param $address i32) (result i32) (i32.load (get_local $address))) (export "store_value" (func $store_value)) (export "load_value" (func $load_value)) (func $wrap (param $input i64) (result i32) (i32.wrap_i64 (local.get $input))) (func $extend (param $input i32) (result i32) (i32.extend8_s (local.get $input))) (func $trunc (param $input f64) (result i32) (i32.trunc_f64_s (local.get $input))) (export "wrap" (func $wrap)) (export "extend" (func $extend)) (export "trunc" (func $trunc)))