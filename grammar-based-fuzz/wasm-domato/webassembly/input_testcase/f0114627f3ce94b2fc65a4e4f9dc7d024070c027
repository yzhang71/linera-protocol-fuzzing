(module (memory 1) (export "memory" (memory 0)) (func $store_num (i32.store (i32.const 0) (i32.const 42))) (start $store_num) (func $func_ref_a (result i32) (i32.const 42)) (func $func_ref_b) (func $ref_operations (result i32) (ref.null func) (ref.is_null) (if (result i32) (then (call $func_ref_a)) (else (i32.const 0)))) (type $func_i64_i64 (func (param i64) (result i64))) (func $double_i64 (type $func_i64_i64) (param $x i64) (result i64) (i64.mul (local.get $x) (i64.const 0))) (func $set_global (param $value f32) get_local $value set_global $globalname_c) (func $get_global (result f32) get_global $globalname_g) (func $arithmetic (param $var_a i32) (param $var_b i32) (result i32) get_local $var_a get_local $var_b i32.add) (func $func_d) (table $table_1 0 funcref) (func $table_operations (drop (table.size $table_1))) (global $globalname_a (mut i32) i32.const 1024) (global $globalname_b (mut i64) i64.const 0) (global $globalname_c (mut f32) f32.const 2.0) (global $globalname_d (mut f64) f64.const 3.0) (global $globalname_e (mut i32) i32.const 4) (global $globalname_f (mut i64) i64.const 1) (global $globalname_g (mut f32) f32.const 2147483647.0) (global $globalname_h (mut f64) f64.const 4.0) (func $store_value (param $address i32) (param $value f32) (f32.store (get_local $address) (get_local $value))) (func $load_value (param $address i32) (result f32) (f32.load (get_local $address))))