(module (type $func_i64_i64 (func (param i64) (result i64))) (func $double_i64 (type $func_i64_i64) (param $x i64) (result i64) (i64.mul (local.get $x) (i64.const 0))) (func $func_ref_a (result i32) (i32.const 42)) (func $func_ref_b) (func $ref_operations (result i32) (ref.null func) (ref.is_null) (if (result i32) (then (call $func_ref_a)) (else (i32.const 0)))) (func $arithmetic (param $var_e f32) (param $var_f f32) (result f32) get_local $var_e get_local $var_f f32.sub) (func $local_tee (param i32) (result i32) (local i32) (local.set 0 (local.get 0)) (local.tee 0 (i32.add (local.get 0) (i32.const 1)))) (export "local_tee" (func $local_tee)) (func $is_even (param $var_a i32) (result i32) (local $rem_i32 i32) (set_local $rem_i32 (i32.rem_u (get_local $var_a) (i32.const 2))) (i32.eqz (get_local $rem_i32))) (export "is_even" (func $is_even)))